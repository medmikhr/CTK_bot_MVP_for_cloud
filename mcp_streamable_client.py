#!/usr/bin/env python3
"""
MCP Streamable HTTP –∫–ª–∏–µ–Ω—Ç —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ MCP 2025-03-26
"""

import asyncio
import json
import logging
from typing import Any, Dict, List, Optional
import aiohttp
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class MCPStreamableClient:
    """MCP –∫–ª–∏–µ–Ω—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Streamable HTTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    
    def __init__(self, endpoint_url: str):
        self.endpoint_url = endpoint_url
        self.session_id: Optional[str] = None
        self.next_request_id = 1
        self.initialized = False
    
    def get_next_request_id(self) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ ID –∑–∞–ø—Ä–æ—Å–∞"""
        request_id = self.next_request_id
        self.next_request_id += 1
        return request_id
    
    async def send_request(self, method: str, params: Optional[Dict[str, Any]] = None) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ HTTP POST"""
        request_id = self.get_next_request_id()
        
        message = {
            "jsonrpc": "2.0",
            "id": request_id,
            "method": method
        }
        
        if params is not None:
            message["params"] = params
        
        headers = {
            'Content-Type': 'application/json',
            'Accept': 'application/json, text/event-stream'
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º session ID –µ—Å–ª–∏ –µ—Å—Ç—å
        if self.session_id:
            headers['Mcp-Session-Id'] = self.session_id
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {method}")
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                self.endpoint_url,
                json=message,
                headers=headers
            ) as response:
                
                content_type = response.headers.get('Content-Type', '')
                
                # –ü–æ–ª—É—á–∞–µ–º session ID –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–¥–ª—è initialize)
                if 'Mcp-Session-Id' in response.headers:
                    self.session_id = response.headers['Mcp-Session-Id']
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω session ID: {self.session_id}")
                
                if content_type.startswith('text/event-stream'):
                    # SSE response
                    return await self.read_sse_response(response)
                elif content_type.startswith('application/json'):
                    # JSON response
                    return await response.json()
                else:
                    raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π Content-Type: {content_type}")
    
    async def read_sse_response(self, response) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ SSE response"""
        logger.info("–ß—Ç–µ–Ω–∏–µ SSE response...")
        
        last_data = None
        async for line in response.content:
            line_str = line.decode('utf-8').strip()
            
            if line_str.startswith('id: '):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–±—ã—Ç–∏—è (–¥–ª—è resumability)
                event_id = line_str[4:]
                continue
            elif line_str.startswith('data: '):
                data_str = line_str[6:]  # –£–±–∏—Ä–∞–µ–º 'data: '
                try:
                    data = json.loads(data_str)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ SSE —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('method', 'response')}")
                    last_data = data
                except json.JSONDecodeError as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SSE –¥–∞–Ω–Ω—ã—Ö: {e}")
                    continue
            elif line_str == '' and last_data is not None:
                # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –∫–æ–Ω–µ—Ü —Å–æ–±—ã—Ç–∏—è
                return last_data
        
        if last_data:
            return last_data
        
        raise ValueError("SSE stream –∑–∞–∫—Ä—ã—Ç –±–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    async def initialize(self) -> Dict[str, Any]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP –∫–ª–∏–µ–Ω—Ç–∞...")
        
        params = {
            "protocolVersion": "2025-03-26",
            "capabilities": {
                "roots": {
                    "listChanged": False
                },
                "sampling": {}
            },
            "clientInfo": {
                "name": "MCP Streamable HTTP Test Client",
                "version": "1.0.0"
            }
        }
        
        result = await self.send_request("initialize", params)
        
        if 'error' in result:
            raise Exception(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {result['error']}")
        
        self.initialized = True
        logger.info("‚úÖ MCP –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        return result
    
    async def list_tools(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        if not self.initialized:
            raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        return await self.send_request("tools/list")
    
    async def call_tool(self, name: str, arguments: Dict[str, Any]) -> Dict[str, Any]:
        """–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        if not self.initialized:
            raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info(f"–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {name}")
        
        params = {
            "name": name,
            "arguments": arguments
        }
        
        return await self.send_request("tools/call", params)
    
    async def list_resources(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if not self.initialized:
            raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        return await self.send_request("resources/list")
    
    async def list_prompts(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        if not self.initialized:
            raise Exception("–ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        return await self.send_request("prompts/list")
    
    async def close_session(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏"""
        if self.session_id:
            headers = {'Mcp-Session-Id': self.session_id}
            
            async with aiohttp.ClientSession() as session:
                async with session.delete(self.endpoint_url, headers=headers) as response:
                    if response.status == 200:
                        logger.info("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ")
                    else:
                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é: {response.status}")

async def test_streamable_http_connection(endpoint_url: str = "http://127.0.0.1:8080/mcp"):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Streamable HTTP MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    print(f"üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP Streamable HTTP –∫–ª–∏–µ–Ω—Ç–∞")
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫: {endpoint_url}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(endpoint_url.replace('/mcp', '/health')) as response:
                if response.status == 200:
                    health_data = await response.json()
                    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data.get('status')}")
                    print(f"   –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {health_data.get('transport')}")
                    print(f"   –í–µ—Ä—Å–∏—è: {health_data.get('version')}")
                else:
                    print(f"‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º: {response.status}")
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: python mcp_streamable_server.py")
        return False
    
    print("\n" + "-" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª–∞
    client = MCPStreamableClient(endpoint_url)
    
    try:
        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\n1Ô∏è‚É£  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        init_result = await client.initialize()
        print(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
        print(f"   Session ID: {client.session_id}")
        print(f"   –í–µ—Ä—Å–∏—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞: {init_result['result']['protocolVersion']}")
        print(f"   –°–µ—Ä–≤–µ—Ä: {init_result['result']['serverInfo']['name']} v{init_result['result']['serverInfo']['version']}")
        
        # 2. –°–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n2Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        tools_result = await client.list_tools()
        if 'error' in tools_result:
            print(f"‚ùå –û—à–∏–±–∫–∞: {tools_result['error']}")
        else:
            tools = tools_result['result']['tools']
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
            for tool in tools:
                print(f"   - {tool['name']}: {tool['description']}")
        
        # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        print("\n3Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç get_server_info
        print("\n   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ get_server_info...")
        try:
            result = await client.call_tool("get_server_info", {})
            if 'error' in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                content = result['result']['content'][0]['text']
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"   üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # –¢–µ—Å—Ç search_documents
        print("\n   üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ search_documents...")
        try:
            result = await client.call_tool("search_documents", {
                "query": "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏",
                "limit": 3
            })
            if 'error' in result:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                content = result['result']['content'][0]['text']
                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω (–¥–ª–∏–Ω–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤)")
                print(f"   üìã –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {content[:200]}...")
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # 4. –°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤
        print("\n4Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
        try:
            resources_result = await client.list_resources()
            if 'error' in resources_result:
                print(f"‚ùå –û—à–∏–±–∫–∞: {resources_result['error']}")
            else:
                resources = resources_result['result']['resources']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(resources)} —Ä–µ—Å—É—Ä—Å–æ–≤")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # 5. –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
        print("\n5Ô∏è‚É£  –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
        try:
            prompts_result = await client.list_prompts()
            if 'error' in prompts_result:
                print(f"‚ùå –û—à–∏–±–∫–∞: {prompts_result['error']}")
            else:
                prompts = prompts_result['result']['prompts']
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤")
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
        
        # 6. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
        print("\n6Ô∏è‚É£  –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏...")
        await client.close_session()
        
        print("\n" + "=" * 60)
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã MCP Streamable HTTP –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –Ω–∞ –ø–æ—Ä—Ç—É 8080")
        print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª MCP Streamable HTTP —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        print("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        return False

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_streamable_http_connection()

if __name__ == "__main__":
    asyncio.run(main())
