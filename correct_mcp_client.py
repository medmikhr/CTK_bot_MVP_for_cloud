#!/usr/bin/env python3
"""
–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π MCP –∫–ª–∏–µ–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import asyncio
import json
from mcp import ClientSession, StdioServerParameters
from mcp.client.stdio import stdio_client

async def test_mcp_connection(config_path: str, server_name: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    with open(config_path, 'r', encoding='utf-8') as f:
        config = json.load(f)
    
    server_config = config['mcpServers'].get(server_name)
    if not server_config:
        raise ValueError(f"–°–µ—Ä–≤–µ—Ä {server_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞: {server_config}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if 'command' not in server_config:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è stdio –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    server_params = StdioServerParameters(
        command=server_config['command'],
        args=server_config.get('args', []),
        env=server_config.get('env', {})
    )
    
    print(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É {server_name}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {server_params.command}")
    print(f"   –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {server_params.args}")
    print(f"   –û–∫—Ä—É–∂–µ–Ω–∏–µ: {server_params.env}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É
    async with stdio_client(server_params) as (read_stream, write_stream):
        print("‚úÖ Stdio –∫–ª–∏–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        
        async with ClientSession(read_stream, write_stream) as session:
            print("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            await session.initialize()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ!")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            print("\nüîß –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            try:
                tools_response = await session.list_tools()
                if tools_response.tools:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(tools_response.tools)} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤:")
                    for tool in tools_response.tools:
                        print(f"  - {tool.name}: {tool.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
                else:
                    print("‚ö†Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
            print("\nüìö –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
            try:
                resources_response = await session.list_resources()
                if resources_response.resources:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(resources_response.resources)} —Ä–µ—Å—É—Ä—Å–æ–≤:")
                    for resource in resources_response.resources:
                        print(f"  - {resource.name}: {resource.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
                else:
                    print("‚ö†Ô∏è  –†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤: {str(e)}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
            print("\nüí¨ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤...")
            try:
                prompts_response = await session.list_prompts()
                if prompts_response.prompts:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(prompts_response.prompts)} –ø—Ä–æ–º–ø—Ç–æ–≤:")
                    for prompt in prompts_response.prompts:
                        print(f"  - {prompt.name}: {prompt.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}")
                else:
                    print("‚ö†Ô∏è  –ü—Ä–æ–º–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤: {str(e)}")
            
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤...")
            try:
                tools_response = await session.list_tools()
                if tools_response.tools:
                    for tool in tools_response.tools:
                        print(f"\n   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool.name}")
                        try:
                            if tool.name == "get_server_info":
                                result = await session.call_tool(tool.name, {})
                                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                            elif tool.name == "search_documents":
                                result = await session.call_tool(tool.name, {
                                    "query": "—Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å",
                                    "limit": 2
                                })
                                print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                            else:
                                print(f"   ‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {tool.name}")
                        except Exception as e:
                            print(f"   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {tool.name}: {str(e)}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {str(e)}")
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã MCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")

async def main():
    import sys
    
    if len(sys.argv) < 3:
        print("Usage: python correct_mcp_client.py <config_path> <server_name>")
        print("Example: python correct_mcp_client.py mcp_config.json vector-search-server")
        sys.exit(1)
    
    config_path = sys.argv[1]
    server_name = sys.argv[2]
    
    try:
        await test_mcp_connection(config_path, server_name)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        print("–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ –æ—à–∏–±–∫–∏:")
        print(traceback.format_exc())
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())
